services:
  frontend:
    build: ./frontend
    container_name: nextjs_frontend
    ports:
      - "3000:3000"
    depends_on:
      - webapi
    environment:
      - NEXT_PUBLIC_API_URL=http://100.66.106.128:5000
      - HOST_IP=0.0.0.0
    env_file:
      - .env
    restart: always
    networks:
      - app-network
    command: npx nodemon

  webapi:
    build: ./backend
    container_name: dotnet_backend
    ports:
      - "5000:5000"
      - "5001:5001"
    depends_on:
      worker:
        condition: service_completed_successfully
    volumes:
      - ./backend/aspnetcore-https.pfx:/https/aspnetcore-https.pfx:ro
      - ./backend/wwwroot/uploads:/app/wwwroot/uploads
    environment:
      - ASPNETCORE_URLS=http://+:5000;https://+:5001
      - ASPNETCORE_ENVIRONMENT=Development
      - ConnectionStrings__DefaultConnection=Host=postgres;Port=5432;Database=${POSTGRES_DB};Username=${POSTGRES_USER};Password=${POSTGRES_PASSWORD}
      - ASPNETCORE_Kestrel__Certificates__Default__Path=/https/aspnetcore-https.pfx
      - ASPNETCORE_Kestrel__Certificates__Default__Password=${HTTPS_CERT_PASSWORD}
    env_file:
      - .env
    restart: unless-stopped
    networks:
      - app-network

  worker:
    build:
      context: ./backend
      dockerfile: Dockerfile.sdk
    container_name: dotnet_worker
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./backend/aspnetcore-https.pfx:/https/aspnetcore-https.pfx:ro
      - ./backend/wwwroot:/app/wwwroot
    environment:
      - ConnectionStrings__DefaultConnection=Host=postgres;Port=5432;Database=${POSTGRES_DB};Username=${POSTGRES_USER};Password=${POSTGRES_PASSWORD}
      - ASPNETCORE_ENVIRONMENT=Development
    command: >
      sh -c "dotnet tool restore &&
                  dotnet build --configuration Debug &&
                  dotnet ef database update --project /app/backend.csproj &&
                  echo 'Database migration completed' &&
                  exit 0"
    restart: on-failure
    networks:
      - app-network

  postgres:
    image: postgres:16
    container_name: my_postgres
    restart: always
    env_file:
      - .env
    ports:
      - "5433:5432" # Host:Container Mapping
    volumes:
      - pg_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  pg_data:
