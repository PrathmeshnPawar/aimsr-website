pipeline {
    agent any

    environment {
        DOTNET_VERSION = '8.0'
        NODE_VERSION = '22'
        DOCKER_IMAGE_BACKEND = 'aimsr-website-webapi'
        DOCKER_IMAGE_FRONTEND = 'aimsr-website-frontend'
        DOCKER_IMAGE_DB = 'postgres:16'
        DOCKER_IMAGE_WORKER = 'aimsr-website-worker'
        // DOCKER_REGISTRY = 'https://your-registry-url' // Uncomment and replace with your registry URL
        // DOCKER_REGISTRY_CREDENTIALS = 'registry-credentials-id' // Uncomment and replace with your registry credential ID
    }

    stages {
        stage('Checkout Code') {
            steps {
                git branch: 'master', credentialsId: 'github-pat', url: 'https://github.com/PrathmeshnPawar/aimsr-website.git'
            }
        }

        stage('Setup .NET') {
            steps {
                script {
                    sh "dotnet --version"
                    sh "dotnet restore backend/"
                }
            }
        }

        stage('Build .NET Web API') {
            steps {
                sh "dotnet build backend/ --configuration Release"
            }
        }

        stage('Test .NET Web API') {
            steps {
                sh "dotnet test backend/"
            }
        }

        stage('Build Backend Docker Image') {
            steps {
                script {
                    docker.build("${DOCKER_IMAGE_BACKEND}", "./backend")
                }
            }
        }

        stage('Setup Node.js') {
            steps {
                script {
                    sh """
                        export NVM_DIR="\$HOME/.nvm"
                        [ -s "\$NVM_DIR/nvm.sh" ] && . "\$NVM_DIR/nvm.sh"
                        nvm install $NODE_VERSION
                        nvm use $NODE_VERSION
                        NODE_VERSION_OUTPUT=\$(nvm version)
                        export PATH="\$NVM_DIR/versions/node/\$NODE_VERSION_OUTPUT/bin:\$PATH"
                        node -v
                        npm -v
                    """
                }
            }
        }

        stage('Build Next.js Frontend') {
            steps {
                sh """
                    cd frontend
                    npm install
                    npm run build
                """
            }
        }

        stage('Build Frontend Docker Image') {
            steps {
                script {
                    docker.build("${DOCKER_IMAGE_FRONTEND}", "./frontend")
                }
            }
        }

        stage('Run with Docker Compose') {
            steps {
                sh "docker compose -f docker-compose.yml up -d"
            }
        }


    }

    post {
        success {
            echo 'üéâ Build Successful!'
        }
        failure {
            echo '‚ùå Build Failed!'
        }
        always {
            sh """
                docker stop \$(docker ps -q --filter ancestor=\${DOCKER_IMAGE_BACKEND}) || true
                docker stop \$(docker ps -q --filter ancestor=\${DOCKER_IMAGE_FRONTEND}) || true
                docker rmi -f \${DOCKER_IMAGE_BACKEND} \${DOCKER_IMAGE_FRONTEND} || true
            """
        }
    }
}

